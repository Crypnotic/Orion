// Buildscript configuration
buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()

        maven {
            name = 'gradle-plugins'
            url = 'https://plugins.gradle.org/m2'
        }
    }

    dependencies {
        classpath group: 'gradle.plugin.net.minecrell', name: 'licenser', version: minecrell_licenser_version
        classpath group: 'com.github.jengelman.gradle.plugins', name: 'shadow', version: shadow_version
        classpath group: 'org.ajoberstar', name: 'grgit', version: grgit_version
    }
}

String obtainRepositoryPath(String url) {
    if(url == null) return null
    if(url.startsWith("ssh://") || url.startsWith("http")) {
        def uri = URI.create url
        return uri.path.substring(1).replace(".git", "")
    } else if(url.matches("^[a-zA-Z0-9_\\-]+@[a-zA-Z0-9_\\-]+.[a-z]+:(.+?)")) {
        return url.split(":", 2)[1].replace(".git", "")
    }
    return null
}

def gitRepo = null

try {
    gitRepo = org.ajoberstar.grgit.Grgit.open(dir: ".")
}
catch (org.eclipse.jgit.errors.RepositoryNotFoundException ignored) {}

project.ext.gitCommitId = gitRepo?.head()?.getAbbreviatedId(7) ?: "UNKNOWN"
project.ext.gitBranch = gitRepo?.branch?.current()?.name ?: "UNKNOWN"
project.ext.gitRepository = obtainRepositoryPath(gitRepo?.remote?.list()?.find { it.name == "origin" }?.url) ?: "UNKNOWN"

// Subproject configurations
allprojects {
    // Project information
    group = 'eu.mikroskeem'
    version = properties.version
    description = properties.description
    url = properties.url

    // Repositories
    repositories {
        mavenLocal()
        mavenCentral()

        maven {
            name = 'mikroskeem-repo'
            url = 'https://repo.wut.ee/repository/mikroskeem-repo'
        }

        maven {
            name = 'destroystokyo-repo'
            url = 'https://repo.destroystokyo.com/repository/maven-public'
        }

        maven {
            name = 'spongepowered-repo'
            url = 'https://repo.spongepowered.org/maven'
        }
    }
}

subprojects {
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'net.minecrell.licenser'
    apply plugin: 'java'

    // Configurations
    configurations {
        downloadDep

        compile.extendsFrom downloadDep
    }

    // Java compiler options
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    // Licenser task
    license {
        header = rootProject.file('etc/HEADER')
        ignoreFailures = false
        include "**/*.java"
    }

    // downloadDep configuration collector
    task collectDependencies {
        subprojects {
            inputs.file(configurations.downloadDep)
        }
        outputs.file(new File(temporaryDir, 'deps.txt'))

        doLast {
            def outputFile = new File(temporaryDir, 'deps.txt')
            def deps = [] as Set
            rootProject.subprojects.each { subproject ->
                subproject.configurations.downloadDep.resolvedConfiguration.resolvedArtifacts.each { dep ->
                    def depString = dep.id.componentIdentifier.toString()
                    def splitted = depString.split(':')
                    if(splitted.length > 3) {
                        depString = java.util.Arrays.copyOf(splitted, 3).join(":")
                    }
                    deps += depString
                }
            }
            outputFile.createNewFile()
            outputFile.withWriter { BufferedWriter writer ->
                deps.each {
                    writer.writeLine it
                }
            }
        }
    }
}

// Wrapper task
wrapper {
    gradleVersion = gradle_version
}

defaultTasks 'build'
